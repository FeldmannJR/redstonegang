/*
 * This file is generated by jOOQ.
 */
package dev.feldmann.redstonegang.wire.game.base.database.addons.tables;


import dev.feldmann.redstonegang.wire.game.base.database.addons.DefaultSchema;
import dev.feldmann.redstonegang.wire.game.base.database.addons.Indexes;
import dev.feldmann.redstonegang.wire.game.base.database.addons.Keys;
import dev.feldmann.redstonegang.wire.game.base.database.addons.tables.records.TerrenosRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Terrenos extends TableImpl<TerrenosRecord> {

    private static final long serialVersionUID = 769431864;

    /**
     * The reference instance of <code>terrenos</code>
     */
    public static final Terrenos TERRENOS = new Terrenos();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TerrenosRecord> getRecordType() {
        return TerrenosRecord.class;
    }

    /**
     * The column <code>terrenos.id</code>.
     */
    public final TableField<TerrenosRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>terrenos.owner</code>.
     */
    public final TableField<TerrenosRecord, Integer> OWNER = createField("owner", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>terrenos.minX</code>.
     */
    public final TableField<TerrenosRecord, Integer> MINX = createField("minX", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>terrenos.maxX</code>.
     */
    public final TableField<TerrenosRecord, Integer> MAXX = createField("maxX", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>terrenos.minZ</code>.
     */
    public final TableField<TerrenosRecord, Integer> MINZ = createField("minZ", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>terrenos.maxZ</code>.
     */
    public final TableField<TerrenosRecord, Integer> MAXZ = createField("maxZ", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>terrenos.world</code>.
     */
    public final TableField<TerrenosRecord, String> WORLD = createField("world", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>terrenos.properties</code>.
     */
    public final TableField<TerrenosRecord, String> PROPERTIES = createField("properties", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>terrenos</code> table reference
     */
    public Terrenos() {
        this(DSL.name("terrenos"), null);
    }

    /**
     * Create an aliased <code>terrenos</code> table reference
     */
    public Terrenos(String alias) {
        this(DSL.name(alias), TERRENOS);
    }

    /**
     * Create an aliased <code>terrenos</code> table reference
     */
    public Terrenos(Name alias) {
        this(alias, TERRENOS);
    }

    private Terrenos(Name alias, Table<TerrenosRecord> aliased) {
        this(alias, aliased, null);
    }

    private Terrenos(Name alias, Table<TerrenosRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Terrenos(Table<O> child, ForeignKey<O, TerrenosRecord> key) {
        super(child, key, TERRENOS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TERRENOS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TerrenosRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TERRENOS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TerrenosRecord> getPrimaryKey() {
        return Keys.KEY_TERRENOS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TerrenosRecord>> getKeys() {
        return Arrays.<UniqueKey<TerrenosRecord>>asList(Keys.KEY_TERRENOS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Terrenos as(String alias) {
        return new Terrenos(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Terrenos as(Name alias) {
        return new Terrenos(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Terrenos rename(String name) {
        return new Terrenos(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Terrenos rename(Name name) {
        return new Terrenos(name, null);
    }
}
