/*
 * This file is generated by jOOQ.
 */
package dev.feldmann.redstonegang.wire.game.base.addons.server.quests.db.tables;


import dev.feldmann.redstonegang.wire.game.base.addons.server.quests.db.DefaultSchema;
import dev.feldmann.redstonegang.wire.game.base.addons.server.quests.db.Indexes;
import dev.feldmann.redstonegang.wire.game.base.addons.server.quests.db.Keys;
import dev.feldmann.redstonegang.wire.game.base.addons.server.quests.db.tables.records.QuestsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Quests extends TableImpl<QuestsRecord> {

    private static final long serialVersionUID = 1184362442;

    /**
     * The reference redstonegang of <code>quests</code>
     */
    public static final Quests QUESTS = new Quests();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuestsRecord> getRecordType() {
        return QuestsRecord.class;
    }

    /**
     * The column <code>quests.id</code>.
     */
    public final TableField<QuestsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>quests.vars</code>.
     */
    public final TableField<QuestsRecord, String> VARS = createField("vars", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>quests.nome</code>.
     */
    public final TableField<QuestsRecord, String> NOME = createField("nome", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>quests.hook</code>.
     */
    public final TableField<QuestsRecord, String> HOOK = createField("hook", org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>quests.desc</code>.
     */
    public final TableField<QuestsRecord, String> DESC = createField("desc", org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * Create a <code>quests</code> table reference
     */
    public Quests() {
        this(DSL.name("quests"), null);
    }

    /**
     * Create an aliased <code>quests</code> table reference
     */
    public Quests(String alias) {
        this(DSL.name(alias), QUESTS);
    }

    /**
     * Create an aliased <code>quests</code> table reference
     */
    public Quests(Name alias) {
        this(alias, QUESTS);
    }

    private Quests(Name alias, Table<QuestsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Quests(Name alias, Table<QuestsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Quests(Table<O> child, ForeignKey<O, QuestsRecord> key) {
        super(child, key, QUESTS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.QUESTS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<QuestsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_QUESTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<QuestsRecord> getPrimaryKey() {
        return Keys.KEY_QUESTS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<QuestsRecord>> getKeys() {
        return Arrays.<UniqueKey<QuestsRecord>>asList(Keys.KEY_QUESTS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Quests as(String alias) {
        return new Quests(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Quests as(Name alias) {
        return new Quests(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Quests rename(String name) {
        return new Quests(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Quests rename(Name name) {
        return new Quests(name, null);
    }
}
