/*
 * This file is generated by jOOQ.
 */
package dev.feldmann.redstonegang.wire.game.base.addons.both.chat.db.tables;


import dev.feldmann.redstonegang.wire.game.base.addons.both.chat.db.DefaultSchema;
import dev.feldmann.redstonegang.wire.game.base.addons.both.chat.db.Indexes;
import dev.feldmann.redstonegang.wire.game.base.addons.both.chat.db.Keys;
import dev.feldmann.redstonegang.wire.game.base.addons.both.chat.db.tables.records.ChatHistoryRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChatHistory extends TableImpl<ChatHistoryRecord> {

    private static final long serialVersionUID = -896833572;

    /**
     * The reference redstonegang of <code>chat_history</code>
     */
    public static final ChatHistory CHAT_HISTORY = new ChatHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChatHistoryRecord> getRecordType() {
        return ChatHistoryRecord.class;
    }

    /**
     * The column <code>chat_history.id</code>.
     */
    public final TableField<ChatHistoryRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>chat_history.sender</code>.
     */
    public final TableField<ChatHistoryRecord, Integer> SENDER = createField("sender", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>chat_history.msg</code>.
     */
    public final TableField<ChatHistoryRecord, String> MSG = createField("msg", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>chat_history.channel</code>.
     */
    public final TableField<ChatHistoryRecord, String> CHANNEL = createField("channel", org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>chat_history.when</code>.
     */
    public final TableField<ChatHistoryRecord, Timestamp> WHEN = createField("when", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>chat_history.server</code>.
     */
    public final TableField<ChatHistoryRecord, String> SERVER = createField("server", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>chat_history.receivers</code>.
     */
    public final TableField<ChatHistoryRecord, String> RECEIVERS = createField("receivers", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>chat_history</code> table reference
     */
    public ChatHistory() {
        this(DSL.name("chat_history"), null);
    }

    /**
     * Create an aliased <code>chat_history</code> table reference
     */
    public ChatHistory(String alias) {
        this(DSL.name(alias), CHAT_HISTORY);
    }

    /**
     * Create an aliased <code>chat_history</code> table reference
     */
    public ChatHistory(Name alias) {
        this(alias, CHAT_HISTORY);
    }

    private ChatHistory(Name alias, Table<ChatHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private ChatHistory(Name alias, Table<ChatHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ChatHistory(Table<O> child, ForeignKey<O, ChatHistoryRecord> key) {
        super(child, key, CHAT_HISTORY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CHAT_HISTORY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ChatHistoryRecord, Long> getIdentity() {
        return Keys.IDENTITY_CHAT_HISTORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ChatHistoryRecord> getPrimaryKey() {
        return Keys.KEY_CHAT_HISTORY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ChatHistoryRecord>> getKeys() {
        return Arrays.<UniqueKey<ChatHistoryRecord>>asList(Keys.KEY_CHAT_HISTORY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChatHistory as(String alias) {
        return new ChatHistory(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChatHistory as(Name alias) {
        return new ChatHistory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ChatHistory rename(String name) {
        return new ChatHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ChatHistory rename(Name name) {
        return new ChatHistory(name, null);
    }
}
