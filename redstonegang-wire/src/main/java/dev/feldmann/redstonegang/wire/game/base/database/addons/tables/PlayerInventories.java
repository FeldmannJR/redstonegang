/*
 * This file is generated by jOOQ.
 */
package dev.feldmann.redstonegang.wire.game.base.database.addons.tables;


import dev.feldmann.redstonegang.wire.game.base.database.addons.DefaultSchema;
import dev.feldmann.redstonegang.wire.game.base.database.addons.Indexes;
import dev.feldmann.redstonegang.wire.game.base.database.addons.Keys;
import dev.feldmann.redstonegang.wire.game.base.database.addons.tables.records.PlayerInventoriesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlayerInventories extends TableImpl<PlayerInventoriesRecord> {

    private static final long serialVersionUID = -1420345626;

    /**
     * The reference instance of <code>player_inventories</code>
     */
    public static final PlayerInventories PLAYER_INVENTORIES = new PlayerInventories();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlayerInventoriesRecord> getRecordType() {
        return PlayerInventoriesRecord.class;
    }

    /**
     * The column <code>player_inventories.id</code>.
     */
    public final TableField<PlayerInventoriesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>player_inventories.invContents</code>.
     */
    public final TableField<PlayerInventoriesRecord, byte[]> INVCONTENTS = createField("invContents", org.jooq.impl.SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>player_inventories.armorContents</code>.
     */
    public final TableField<PlayerInventoriesRecord, byte[]> ARMORCONTENTS = createField("armorContents", org.jooq.impl.SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>player_inventories.enderContents</code>.
     */
    public final TableField<PlayerInventoriesRecord, byte[]> ENDERCONTENTS = createField("enderContents", org.jooq.impl.SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>player_inventories.selectedItem</code>.
     */
    public final TableField<PlayerInventoriesRecord, Integer> SELECTEDITEM = createField("selectedItem", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>player_inventories.potions</code>.
     */
    public final TableField<PlayerInventoriesRecord, String> POTIONS = createField("potions", org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>player_inventories.health</code>.
     */
    public final TableField<PlayerInventoriesRecord, Double> HEALTH = createField("health", org.jooq.impl.SQLDataType.DOUBLE.nullable(false).defaultValue(org.jooq.impl.DSL.inline("20", org.jooq.impl.SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>player_inventories.foodLevel</code>.
     */
    public final TableField<PlayerInventoriesRecord, Integer> FOODLEVEL = createField("foodLevel", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("20", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>player_inventories.foodExhaustion</code>.
     */
    public final TableField<PlayerInventoriesRecord, Double> FOODEXHAUSTION = createField("foodExhaustion", org.jooq.impl.SQLDataType.FLOAT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.FLOAT)), this, "");

    /**
     * The column <code>player_inventories.foodSaturation</code>.
     */
    public final TableField<PlayerInventoriesRecord, Double> FOODSATURATION = createField("foodSaturation", org.jooq.impl.SQLDataType.FLOAT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("5", org.jooq.impl.SQLDataType.FLOAT)), this, "");

    /**
     * The column <code>player_inventories.exp</code>.
     */
    public final TableField<PlayerInventoriesRecord, Double> EXP = createField("exp", org.jooq.impl.SQLDataType.FLOAT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.FLOAT)), this, "");

    /**
     * The column <code>player_inventories.level</code>.
     */
    public final TableField<PlayerInventoriesRecord, Integer> LEVEL = createField("level", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>player_inventories.location</code>.
     */
    public final TableField<PlayerInventoriesRecord, String> LOCATION = createField("location", org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>player_inventories.teleport_location</code>.
     */
    public final TableField<PlayerInventoriesRecord, String> TELEPORT_LOCATION = createField("teleport_location", org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>player_inventories.gamemode</code>.
     */
    public final TableField<PlayerInventoriesRecord, Integer> GAMEMODE = createField("gamemode", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>player_inventories</code> table reference
     */
    public PlayerInventories() {
        this(DSL.name("player_inventories"), null);
    }

    /**
     * Create an aliased <code>player_inventories</code> table reference
     */
    public PlayerInventories(String alias) {
        this(DSL.name(alias), PLAYER_INVENTORIES);
    }

    /**
     * Create an aliased <code>player_inventories</code> table reference
     */
    public PlayerInventories(Name alias) {
        this(alias, PLAYER_INVENTORIES);
    }

    private PlayerInventories(Name alias, Table<PlayerInventoriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private PlayerInventories(Name alias, Table<PlayerInventoriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PlayerInventories(Table<O> child, ForeignKey<O, PlayerInventoriesRecord> key) {
        super(child, key, PLAYER_INVENTORIES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PLAYER_INVENTORIES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PlayerInventoriesRecord> getPrimaryKey() {
        return Keys.KEY_PLAYER_INVENTORIES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PlayerInventoriesRecord>> getKeys() {
        return Arrays.<UniqueKey<PlayerInventoriesRecord>>asList(Keys.KEY_PLAYER_INVENTORIES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PlayerInventories as(String alias) {
        return new PlayerInventories(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PlayerInventories as(Name alias) {
        return new PlayerInventories(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerInventories rename(String name) {
        return new PlayerInventories(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerInventories rename(Name name) {
        return new PlayerInventories(name, null);
    }
}
