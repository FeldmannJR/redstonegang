/*
 * This file is generated by jOOQ.
 */
package dev.feldmann.redstonegang.wire.game.base.database.addons.tables;


import dev.feldmann.redstonegang.wire.game.base.database.addons.DefaultSchema;
import dev.feldmann.redstonegang.wire.game.base.database.addons.Indexes;
import dev.feldmann.redstonegang.wire.game.base.database.addons.Keys;
import dev.feldmann.redstonegang.wire.game.base.database.addons.tables.records.FloatshopItemsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FloatshopItems extends TableImpl<FloatshopItemsRecord> {

    private static final long serialVersionUID = 574772099;

    /**
     * The reference instance of <code>floatshop_items</code>
     */
    public static final FloatshopItems FLOATSHOP_ITEMS = new FloatshopItems();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FloatshopItemsRecord> getRecordType() {
        return FloatshopItemsRecord.class;
    }

    /**
     * The column <code>floatshop_items.id</code>.
     */
    public final TableField<FloatshopItemsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>floatshop_items.shop_id</code>.
     */
    public final TableField<FloatshopItemsRecord, Integer> SHOP_ID = createField("shop_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>floatshop_items.itemstack</code>.
     */
    public final TableField<FloatshopItemsRecord, byte[]> ITEMSTACK = createField("itemstack", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>floatshop_items.sell_price</code>.
     */
    public final TableField<FloatshopItemsRecord, Double> SELL_PRICE = createField("sell_price", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>floatshop_items.max_difference</code>.
     */
    public final TableField<FloatshopItemsRecord, Integer> MAX_DIFFERENCE = createField("max_difference", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>floatshop_items.buy_price</code>.
     */
    public final TableField<FloatshopItemsRecord, Double> BUY_PRICE = createField("buy_price", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>floatshop_items.percentage_high</code>.
     */
    public final TableField<FloatshopItemsRecord, Double> PERCENTAGE_HIGH = createField("percentage_high", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>floatshop_items.percentage_low</code>.
     */
    public final TableField<FloatshopItemsRecord, Double> PERCENTAGE_LOW = createField("percentage_low", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>floatshop_items.slot</code>.
     */
    public final TableField<FloatshopItemsRecord, Integer> SLOT = createField("slot", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>floatshop_items.available</code>.
     */
    public final TableField<FloatshopItemsRecord, Double> AVAILABLE = createField("available", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>floatshop_items.regen_minute</code>.
     */
    public final TableField<FloatshopItemsRecord, Double> REGEN_MINUTE = createField("regen_minute", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>floatshop_items.max_available</code>.
     */
    public final TableField<FloatshopItemsRecord, Integer> MAX_AVAILABLE = createField("max_available", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>floatshop_items</code> table reference
     */
    public FloatshopItems() {
        this(DSL.name("floatshop_items"), null);
    }

    /**
     * Create an aliased <code>floatshop_items</code> table reference
     */
    public FloatshopItems(String alias) {
        this(DSL.name(alias), FLOATSHOP_ITEMS);
    }

    /**
     * Create an aliased <code>floatshop_items</code> table reference
     */
    public FloatshopItems(Name alias) {
        this(alias, FLOATSHOP_ITEMS);
    }

    private FloatshopItems(Name alias, Table<FloatshopItemsRecord> aliased) {
        this(alias, aliased, null);
    }

    private FloatshopItems(Name alias, Table<FloatshopItemsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> FloatshopItems(Table<O> child, ForeignKey<O, FloatshopItemsRecord> key) {
        super(child, key, FLOATSHOP_ITEMS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FLOATSHOP_ITEMS_PRIMARY, Indexes.FLOATSHOP_ITEMS_SHOP_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<FloatshopItemsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_FLOATSHOP_ITEMS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FloatshopItemsRecord> getPrimaryKey() {
        return Keys.KEY_FLOATSHOP_ITEMS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FloatshopItemsRecord>> getKeys() {
        return Arrays.<UniqueKey<FloatshopItemsRecord>>asList(Keys.KEY_FLOATSHOP_ITEMS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<FloatshopItemsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FloatshopItemsRecord, ?>>asList(Keys.FLOATSHOP_ITEMS_IBFK_1);
    }

    public FloatshopShops floatshopShops() {
        return new FloatshopShops(this, Keys.FLOATSHOP_ITEMS_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FloatshopItems as(String alias) {
        return new FloatshopItems(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FloatshopItems as(Name alias) {
        return new FloatshopItems(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FloatshopItems rename(String name) {
        return new FloatshopItems(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FloatshopItems rename(Name name) {
        return new FloatshopItems(name, null);
    }
}
