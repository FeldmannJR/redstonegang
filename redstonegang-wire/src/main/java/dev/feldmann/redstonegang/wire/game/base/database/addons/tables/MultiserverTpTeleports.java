/*
 * This file is generated by jOOQ.
 */
package dev.feldmann.redstonegang.wire.game.base.database.addons.tables;


import dev.feldmann.redstonegang.wire.game.base.database.addons.DefaultSchema;
import dev.feldmann.redstonegang.wire.game.base.database.addons.Indexes;
import dev.feldmann.redstonegang.wire.game.base.database.addons.Keys;
import dev.feldmann.redstonegang.wire.game.base.database.addons.tables.records.MultiserverTpTeleportsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MultiserverTpTeleports extends TableImpl<MultiserverTpTeleportsRecord> {

    private static final long serialVersionUID = 352772084;

    /**
     * The reference instance of <code>multiserver_tp_teleports</code>
     */
    public static final MultiserverTpTeleports MULTISERVER_TP_TELEPORTS = new MultiserverTpTeleports();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MultiserverTpTeleportsRecord> getRecordType() {
        return MultiserverTpTeleportsRecord.class;
    }

    /**
     * The column <code>multiserver_tp_teleports.teleporter</code>.
     */
    public final TableField<MultiserverTpTeleportsRecord, Integer> TELEPORTER = createField("teleporter", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>multiserver_tp_teleports.target</code>.
     */
    public final TableField<MultiserverTpTeleportsRecord, Integer> TARGET = createField("target", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>multiserver_tp_teleports.target_server</code>.
     */
    public final TableField<MultiserverTpTeleportsRecord, String> TARGET_SERVER = createField("target_server", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>multiserver_tp_teleports.teleport_time</code>.
     */
    public final TableField<MultiserverTpTeleportsRecord, Timestamp> TELEPORT_TIME = createField("teleport_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>multiserver_tp_teleports.is_request</code>.
     */
    public final TableField<MultiserverTpTeleportsRecord, Boolean> IS_REQUEST = createField("is_request", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * Create a <code>multiserver_tp_teleports</code> table reference
     */
    public MultiserverTpTeleports() {
        this(DSL.name("multiserver_tp_teleports"), null);
    }

    /**
     * Create an aliased <code>multiserver_tp_teleports</code> table reference
     */
    public MultiserverTpTeleports(String alias) {
        this(DSL.name(alias), MULTISERVER_TP_TELEPORTS);
    }

    /**
     * Create an aliased <code>multiserver_tp_teleports</code> table reference
     */
    public MultiserverTpTeleports(Name alias) {
        this(alias, MULTISERVER_TP_TELEPORTS);
    }

    private MultiserverTpTeleports(Name alias, Table<MultiserverTpTeleportsRecord> aliased) {
        this(alias, aliased, null);
    }

    private MultiserverTpTeleports(Name alias, Table<MultiserverTpTeleportsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> MultiserverTpTeleports(Table<O> child, ForeignKey<O, MultiserverTpTeleportsRecord> key) {
        super(child, key, MULTISERVER_TP_TELEPORTS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MULTISERVER_TP_TELEPORTS_PRIMARY, Indexes.MULTISERVER_TP_TELEPORTS_TARGET_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MultiserverTpTeleportsRecord> getPrimaryKey() {
        return Keys.KEY_MULTISERVER_TP_TELEPORTS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MultiserverTpTeleportsRecord>> getKeys() {
        return Arrays.<UniqueKey<MultiserverTpTeleportsRecord>>asList(Keys.KEY_MULTISERVER_TP_TELEPORTS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MultiserverTpTeleports as(String alias) {
        return new MultiserverTpTeleports(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MultiserverTpTeleports as(Name alias) {
        return new MultiserverTpTeleports(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MultiserverTpTeleports rename(String name) {
        return new MultiserverTpTeleports(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MultiserverTpTeleports rename(Name name) {
        return new MultiserverTpTeleports(name, null);
    }
}
