/*
 * This file is generated by jOOQ.
 */
package dev.feldmann.redstonegang.common.db.jooq.redstonegang_common.tables;


import dev.feldmann.redstonegang.common.db.jooq.redstonegang_common.Indexes;
import dev.feldmann.redstonegang.common.db.jooq.redstonegang_common.Keys;
import dev.feldmann.redstonegang.common.db.jooq.redstonegang_common.RedstonegangCommon;
import dev.feldmann.redstonegang.common.db.jooq.redstonegang_common.tables.records.PunishmentsReasonsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PunishmentsReasons extends TableImpl<PunishmentsReasonsRecord> {

    private static final long serialVersionUID = -168903336;

    /**
     * The reference instance of <code>redstonegang_common.punishments_reasons</code>
     */
    public static final PunishmentsReasons PUNISHMENTS_REASONS = new PunishmentsReasons();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PunishmentsReasonsRecord> getRecordType() {
        return PunishmentsReasonsRecord.class;
    }

    /**
     * The column <code>redstonegang_common.punishments_reasons.id</code>.
     */
    public final TableField<PunishmentsReasonsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>redstonegang_common.punishments_reasons.type</code>.
     */
    public final TableField<PunishmentsReasonsRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(6).nullable(false).defaultValue(org.jooq.impl.DSL.inline("'ban'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>redstonegang_common.punishments_reasons.name</code>.
     */
    public final TableField<PunishmentsReasonsRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(250).nullable(false), this, "");

    /**
     * The column <code>redstonegang_common.punishments_reasons.note</code>.
     */
    public final TableField<PunishmentsReasonsRecord, String> NOTE = createField("note", org.jooq.impl.SQLDataType.VARCHAR(250).nullable(false), this, "");

    /**
     * The column <code>redstonegang_common.punishments_reasons.can_remove</code>.
     */
    public final TableField<PunishmentsReasonsRecord, Byte> CAN_REMOVE = createField("can_remove", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * Create a <code>redstonegang_common.punishments_reasons</code> table reference
     */
    public PunishmentsReasons() {
        this(DSL.name("punishments_reasons"), null);
    }

    /**
     * Create an aliased <code>redstonegang_common.punishments_reasons</code> table reference
     */
    public PunishmentsReasons(String alias) {
        this(DSL.name(alias), PUNISHMENTS_REASONS);
    }

    /**
     * Create an aliased <code>redstonegang_common.punishments_reasons</code> table reference
     */
    public PunishmentsReasons(Name alias) {
        this(alias, PUNISHMENTS_REASONS);
    }

    private PunishmentsReasons(Name alias, Table<PunishmentsReasonsRecord> aliased) {
        this(alias, aliased, null);
    }

    private PunishmentsReasons(Name alias, Table<PunishmentsReasonsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PunishmentsReasons(Table<O> child, ForeignKey<O, PunishmentsReasonsRecord> key) {
        super(child, key, PUNISHMENTS_REASONS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return RedstonegangCommon.REDSTONEGANG_COMMON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PUNISHMENTS_REASONS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PunishmentsReasonsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PUNISHMENTS_REASONS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PunishmentsReasonsRecord> getPrimaryKey() {
        return Keys.KEY_PUNISHMENTS_REASONS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PunishmentsReasonsRecord>> getKeys() {
        return Arrays.<UniqueKey<PunishmentsReasonsRecord>>asList(Keys.KEY_PUNISHMENTS_REASONS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PunishmentsReasons as(String alias) {
        return new PunishmentsReasons(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PunishmentsReasons as(Name alias) {
        return new PunishmentsReasons(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PunishmentsReasons rename(String name) {
        return new PunishmentsReasons(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PunishmentsReasons rename(Name name) {
        return new PunishmentsReasons(name, null);
    }
}
