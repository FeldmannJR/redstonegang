/*
 * This file is generated by jOOQ.
 */
package dev.feldmann.redstonegang.common.db.jooq.redstonegang_app.tables;


import dev.feldmann.redstonegang.common.db.jooq.redstonegang_app.Indexes;
import dev.feldmann.redstonegang.common.db.jooq.redstonegang_app.Keys;
import dev.feldmann.redstonegang.common.db.jooq.redstonegang_app.RedstonegangApp;
import dev.feldmann.redstonegang.common.db.jooq.redstonegang_app.tables.records.SkinsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Skins extends TableImpl<SkinsRecord> {

    private static final long serialVersionUID = 1019718614;

    /**
     * The reference instance of <code>redstonegang_app.skins</code>
     */
    public static final Skins SKINS = new Skins();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SkinsRecord> getRecordType() {
        return SkinsRecord.class;
    }

    /**
     * The column <code>redstonegang_app.skins.id</code>.
     */
    public final TableField<SkinsRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>redstonegang_app.skins.uuid</code>.
     */
    public final TableField<SkinsRecord, String> UUID = createField("uuid", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>redstonegang_app.skins.name</code>.
     */
    public final TableField<SkinsRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>redstonegang_app.skins.textures</code>.
     */
    public final TableField<SkinsRecord, String> TEXTURES = createField("textures", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>redstonegang_app.skins.signature</code>.
     */
    public final TableField<SkinsRecord, String> SIGNATURE = createField("signature", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>redstonegang_app.skins.use</code>.
     */
    public final TableField<SkinsRecord, Boolean> USE = createField("use", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>redstonegang_app.skins.created_at</code>.
     */
    public final TableField<SkinsRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>redstonegang_app.skins.updated_at</code>.
     */
    public final TableField<SkinsRecord, Timestamp> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>redstonegang_app.skins</code> table reference
     */
    public Skins() {
        this(DSL.name("skins"), null);
    }

    /**
     * Create an aliased <code>redstonegang_app.skins</code> table reference
     */
    public Skins(String alias) {
        this(DSL.name(alias), SKINS);
    }

    /**
     * Create an aliased <code>redstonegang_app.skins</code> table reference
     */
    public Skins(Name alias) {
        this(alias, SKINS);
    }

    private Skins(Name alias, Table<SkinsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Skins(Name alias, Table<SkinsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Skins(Table<O> child, ForeignKey<O, SkinsRecord> key) {
        super(child, key, SKINS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return RedstonegangApp.REDSTONEGANG_APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SKINS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SkinsRecord, ULong> getIdentity() {
        return Keys.IDENTITY_SKINS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SkinsRecord> getPrimaryKey() {
        return Keys.KEY_SKINS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SkinsRecord>> getKeys() {
        return Arrays.<UniqueKey<SkinsRecord>>asList(Keys.KEY_SKINS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Skins as(String alias) {
        return new Skins(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Skins as(Name alias) {
        return new Skins(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Skins rename(String name) {
        return new Skins(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Skins rename(Name name) {
        return new Skins(name, null);
    }
}
