/*
 * This file is generated by jOOQ.
 */
package dev.feldmann.redstonegang.common.db.jooq.redstonegang_common.tables;


import dev.feldmann.redstonegang.common.db.jooq.redstonegang_common.Indexes;
import dev.feldmann.redstonegang.common.db.jooq.redstonegang_common.Keys;
import dev.feldmann.redstonegang.common.db.jooq.redstonegang_common.RedstonegangCommon;
import dev.feldmann.redstonegang.common.db.jooq.redstonegang_common.tables.records.ExpirationsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Expirations extends TableImpl<ExpirationsRecord> {

    private static final long serialVersionUID = 426491320;

    /**
     * The reference instance of <code>redstonegang_common.expirations</code>
     */
    public static final Expirations EXPIRATIONS = new Expirations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExpirationsRecord> getRecordType() {
        return ExpirationsRecord.class;
    }

    /**
     * The column <code>redstonegang_common.expirations.id</code>.
     */
    public final TableField<ExpirationsRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>redstonegang_common.expirations.user_id</code>.
     */
    public final TableField<ExpirationsRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>redstonegang_common.expirations.days</code>.
     */
    public final TableField<ExpirationsRecord, Integer> DAYS = createField("days", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>redstonegang_common.expirations.type</code>.
     */
    public final TableField<ExpirationsRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(32).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>redstonegang_common.expirations.parent</code>.
     */
    public final TableField<ExpirationsRecord, Long> PARENT = createField("parent", org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>redstonegang_common.expirations.code_id</code>.
     */
    public final TableField<ExpirationsRecord, UInteger> CODE_ID = createField("code_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * The column <code>redstonegang_common.expirations.start</code>.
     */
    public final TableField<ExpirationsRecord, Timestamp> START = createField("start", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>redstonegang_common.expirations.end</code>.
     */
    public final TableField<ExpirationsRecord, Timestamp> END = createField("end", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>redstonegang_common.expirations</code> table reference
     */
    public Expirations() {
        this(DSL.name("expirations"), null);
    }

    /**
     * Create an aliased <code>redstonegang_common.expirations</code> table reference
     */
    public Expirations(String alias) {
        this(DSL.name(alias), EXPIRATIONS);
    }

    /**
     * Create an aliased <code>redstonegang_common.expirations</code> table reference
     */
    public Expirations(Name alias) {
        this(alias, EXPIRATIONS);
    }

    private Expirations(Name alias, Table<ExpirationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Expirations(Name alias, Table<ExpirationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Expirations(Table<O> child, ForeignKey<O, ExpirationsRecord> key) {
        super(child, key, EXPIRATIONS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return RedstonegangCommon.REDSTONEGANG_COMMON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EXPIRATIONS_PRIMARY, Indexes.EXPIRATIONS_USER_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ExpirationsRecord, Long> getIdentity() {
        return Keys.IDENTITY_EXPIRATIONS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ExpirationsRecord> getPrimaryKey() {
        return Keys.KEY_EXPIRATIONS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ExpirationsRecord>> getKeys() {
        return Arrays.<UniqueKey<ExpirationsRecord>>asList(Keys.KEY_EXPIRATIONS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ExpirationsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ExpirationsRecord, ?>>asList(Keys.USER_FK);
    }

    public Users users() {
        return new Users(this, Keys.USER_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Expirations as(String alias) {
        return new Expirations(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Expirations as(Name alias) {
        return new Expirations(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Expirations rename(String name) {
        return new Expirations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Expirations rename(Name name) {
        return new Expirations(name, null);
    }
}
